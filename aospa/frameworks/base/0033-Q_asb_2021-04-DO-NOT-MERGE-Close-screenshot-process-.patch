From 64825d6755ffe3e3f335bfeb3a68c43279e31fe6 Mon Sep 17 00:00:00 2001
From: Miranda Kephart <mkephart@google.com>
Date: Mon, 16 Nov 2020 11:22:13 -0500
Subject: [PATCH 33/40] [Q_asb_2021-04] [DO NOT MERGE] Close screenshot process
 on user switched

Currently, we keep the process up even if the user switches,
meaning that in some cases (if the user is switched while the
screenshot UI is up) we will save images to the wrong profile.
This change makes ScreenshotHelper listen for user switches and
close the screenshot service, so that a new screenshot is
guaranteed to be constructed with the correct user's context.

Bug: 170474245
Fix: 170474245
Test: manual -- verified bad state occurs if user switches within
the timeout period, ensured that screenshots work immediately
after switching with this change.

Change-Id: I9d32d0928e6c2bda161d04555438d0dd7afef0ba
(cherry picked from commit 7ef1a5dd1506075507412626f2533283d9520144)
(cherry picked from commit 9908e1a14575b5543fef15032f9fe495382fce87)
---
 .../internal/util/ScreenshotHelper.java       | 45 ++++++++++++++-----
 1 file changed, 33 insertions(+), 12 deletions(-)

diff --git a/core/java/com/android/internal/util/ScreenshotHelper.java b/core/java/com/android/internal/util/ScreenshotHelper.java
index 6ad0a8a9b61d..eb7add73a4b5 100644
--- a/core/java/com/android/internal/util/ScreenshotHelper.java
+++ b/core/java/com/android/internal/util/ScreenshotHelper.java
@@ -1,10 +1,14 @@
 package com.android.internal.util;
 
+import static android.content.Intent.ACTION_USER_SWITCHED;
+
 import android.annotation.NonNull;
 import android.annotation.Nullable;
+import android.content.BroadcastReceiver;
 import android.content.ComponentName;
 import android.content.Context;
 import android.content.Intent;
+import android.content.IntentFilter;
 import android.content.ServiceConnection;
 import android.net.Uri;
 import android.os.Bundle;
@@ -52,8 +56,21 @@ public class ScreenshotHelper {
         }
     };
 
+    private final BroadcastReceiver mBroadcastReceiver = new BroadcastReceiver() {
+        @Override
+        public void onReceive(Context context, Intent intent) {
+            synchronized (mScreenshotLock) {
+                if (ACTION_USER_SWITCHED.equals(intent.getAction())) {
+                    resetConnection();
+                }
+            }
+        }
+    };
+
     public ScreenshotHelper(Context context) {
         mContext = context;
+        IntentFilter filter = new IntentFilter(ACTION_USER_SWITCHED);
+        mContext.registerReceiver(mBroadcastReceiver, filter);
     }
 
     /**
@@ -117,15 +134,11 @@ public class ScreenshotHelper {
                     SYSUI_SCREENSHOT_SERVICE);
             final Intent serviceIntent = new Intent();
 
-            final Runnable mScreenshotTimeout = new Runnable() {
-                @Override
-                public void run() {
+            final Runnable mScreenshotTimeout = () -> {
                     synchronized (mScreenshotLock) {
-                        if (mScreenshotConnection != null) {
-                            mContext.unbindService(mScreenshotConnection);
-                            mScreenshotConnection = null;
-                            notifyScreenshotError();
-                        }
+                        Log.e(TAG, "Timed out before getting screenshot capture response");
+                        resetConnection();
+                        notifyScreenshotError();
                     }
                     if (completionConsumer != null) {
                         completionConsumer.accept(null);
@@ -149,8 +162,7 @@ public class ScreenshotHelper {
                             public void handleMessage(Message msg) {
                                 synchronized (mScreenshotLock) {
                                     if (mScreenshotConnection == myConn) {
-                                        mContext.unbindService(mScreenshotConnection);
-                                        mScreenshotConnection = null;
+                                        resetConnection();
                                         handler.removeCallbacks(mScreenshotTimeout);
                                     }
                                 }
@@ -179,8 +191,7 @@ public class ScreenshotHelper {
                 public void onServiceDisconnected(ComponentName name) {
                     synchronized (mScreenshotLock) {
                         if (mScreenshotConnection != null) {
-                            mContext.unbindService(mScreenshotConnection);
-                            mScreenshotConnection = null;
+                            resetConnection();
                             handler.removeCallbacks(mScreenshotTimeout);
                             notifyScreenshotError();
                         }
@@ -196,6 +207,16 @@ public class ScreenshotHelper {
         }
     }
 
+    /**
+     * Unbinds the current screenshot connection (if any).
+     */
+    private void resetConnection() {
+        if (mScreenshotConnection != null) {
+            mContext.unbindService(mScreenshotConnection);
+            mScreenshotConnection = null;
+        }
+    }
+
     /**
      * Notifies the screenshot service to show an error.
      */
-- 
2.34.1

