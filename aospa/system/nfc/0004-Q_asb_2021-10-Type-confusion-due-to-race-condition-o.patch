From 890ac8a9cf9c312dae7f9b0373bc9020307ab1ea Mon Sep 17 00:00:00 2001
From: Alisher Alikhodjaev <alisher@google.com>
Date: Wed, 21 Jul 2021 19:31:43 -0700
Subject: [PATCH 4/4] [Q_asb_2021-10] Type confusion due to race condition on
 tag type change

Pending timers need to be canceled before a tag type is changed.

Bug: 192472262
Test: build ok
Merged-In: Iebfcaf9d269381ef2ba14a26e6124f173d2299ec
Change-Id: Icd4b5a1615dac4548c6343344e17d7f087c7c057
(cherry picked from commit 8227ca062e2a60d811756ff97ff96c1412ef34b3)
---
 src/nfa/rw/nfa_rw_main.cc | 58 +++++++++++++++++++++++++++++++++++++++
 src/nfc/include/rw_int.h  | 11 ++++++++
 src/nfc/tags/rw_main.cc   | 40 +++++++++++++++++++++++++++
 3 files changed, 109 insertions(+)

diff --git a/src/nfa/rw/nfa_rw_main.cc b/src/nfa/rw/nfa_rw_main.cc
index 5257b81..36701ac 100644
--- a/src/nfa/rw/nfa_rw_main.cc
+++ b/src/nfa/rw/nfa_rw_main.cc
@@ -29,6 +29,7 @@
 #include "nfa_dm_int.h"
 #include "nfa_rw_api.h"
 #include "nfa_rw_int.h"
+#include "rw_int.h"
 
 using android::base::StringPrintf;
 
@@ -87,6 +88,63 @@ void nfa_rw_init(void) {
 **
 *******************************************************************************/
 void nfa_rw_sys_disable(void) {
+  tRW_T1T_CB* p_t1t;
+  tRW_T2T_CB* p_t2t;
+  tRW_T3T_CB* p_t3t;
+  tRW_T4T_CB* p_t4t;
+  tRW_I93_CB* p_i93;
+  tRW_MFC_CB* p_mfc;
+
+  DLOG_IF(INFO, nfc_debug_enabled) << __func__;
+
+  switch (rw_cb.tcb_type) {
+    case RW_CB_TYPE_T1T:
+      p_t1t = &rw_cb.tcb.t1t;
+      if (p_t1t->p_cur_cmd_buf != NULL) {
+        GKI_freebuf(p_t1t->p_cur_cmd_buf);
+        p_t1t->p_cur_cmd_buf = NULL;
+      }
+      break;
+    case RW_CB_TYPE_T2T:
+      p_t2t = &rw_cb.tcb.t2t;
+      if (p_t2t->p_cur_cmd_buf != NULL) {
+        GKI_freebuf(p_t2t->p_cur_cmd_buf);
+        p_t2t->p_cur_cmd_buf = NULL;
+      }
+      if (p_t2t->p_sec_cmd_buf != NULL) {
+        GKI_freebuf(p_t2t->p_sec_cmd_buf);
+        p_t2t->p_sec_cmd_buf = NULL;
+      }
+      break;
+    case RW_CB_TYPE_T3T:
+      p_t3t = &rw_cb.tcb.t3t;
+      if (p_t3t->p_cur_cmd_buf != NULL) {
+        GKI_freebuf(p_t3t->p_cur_cmd_buf);
+        p_t3t->p_cur_cmd_buf = NULL;
+      }
+      break;
+    case RW_CB_TYPE_T4T: /* do nothing */
+      p_t4t = &rw_cb.tcb.t4t;
+      break;
+    case RW_CB_TYPE_T5T:
+      p_i93 = &rw_cb.tcb.i93;
+      if (p_i93->p_retry_cmd != NULL) {
+        GKI_freebuf(p_i93->p_retry_cmd);
+        p_i93->p_retry_cmd = NULL;
+      }
+      break;
+    case RW_CB_TYPE_MIFARE:
+      p_mfc = &rw_cb.tcb.mfc;
+      if (p_mfc->p_cur_cmd_buf != NULL) {
+        GKI_freebuf(p_mfc->p_cur_cmd_buf);
+        p_mfc->p_cur_cmd_buf = NULL;
+      }
+      break;
+    default: /* do nothing */
+      break;
+  }
+  rw_cb.tcb_type = RW_CB_TYPE_UNKNOWN;
+
   /* Return to idle */
   NFC_SetStaticRfCback(nullptr);
 
diff --git a/src/nfc/include/rw_int.h b/src/nfc/include/rw_int.h
index 9c50066..698dfe4 100644
--- a/src/nfc/include/rw_int.h
+++ b/src/nfc/include/rw_int.h
@@ -741,8 +741,19 @@ typedef union {
   tRW_MFC_CB mfc;
 } tRW_TCB;
 
+/* RW callback type */
+#define RW_CB_TYPE_UNKNOWN 0
+#define RW_CB_TYPE_T1T 1
+#define RW_CB_TYPE_T2T 2
+#define RW_CB_TYPE_T3T 3
+#define RW_CB_TYPE_T4T 4
+#define RW_CB_TYPE_T5T 5
+#define RW_CB_TYPE_MIFARE 6
+typedef uint8_t tRW_CB_TYPE;
+
 /* RW control blocks */
 typedef struct {
+  tRW_CB_TYPE tcb_type;
   tRW_TCB tcb;
   tRW_CBACK* p_cback;
   uint32_t cur_retry; /* Retry count for the current operation */
diff --git a/src/nfc/tags/rw_main.cc b/src/nfc/tags/rw_main.cc
index 24fe949..0c70638 100644
--- a/src/nfc/tags/rw_main.cc
+++ b/src/nfc/tags/rw_main.cc
@@ -33,6 +33,7 @@
 #include "bt_types.h"
 #include "nci_hmsgs.h"
 #include "nfc_api.h"
+#include "nfc_int.h"
 #include "rw_api.h"
 #include "rw_int.h"
 
@@ -214,6 +215,38 @@ tNFC_STATUS RW_SetActivatedTagType(tNFC_ACTIVATE_DEVT* p_activate_params,
     return (NFC_STATUS_FAILED);
   }
 
+  switch (rw_cb.tcb_type) {
+    case RW_CB_TYPE_T1T: {
+      nfc_stop_quick_timer(&rw_cb.tcb.t1t.timer);
+      break;
+    }
+    case RW_CB_TYPE_T2T: {
+      nfc_stop_quick_timer(&rw_cb.tcb.t2t.t2_timer);
+      break;
+    }
+    case RW_CB_TYPE_T3T: {
+      nfc_stop_quick_timer(&rw_cb.tcb.t3t.timer);
+      nfc_stop_quick_timer(&rw_cb.tcb.t3t.poll_timer);
+      break;
+    }
+    case RW_CB_TYPE_T4T: {
+      nfc_stop_quick_timer(&rw_cb.tcb.t4t.timer);
+      break;
+    }
+    case RW_CB_TYPE_T5T: {
+      nfc_stop_quick_timer(&rw_cb.tcb.i93.timer);
+      break;
+    }
+    case RW_CB_TYPE_MIFARE: {
+      nfc_stop_quick_timer(&rw_cb.tcb.mfc.timer);
+      nfc_stop_quick_timer(&rw_cb.tcb.mfc.mfc_timer);
+      break;
+    }
+    case RW_CB_TYPE_UNKNOWN: {
+      break;
+    }
+  }
+
   /* Reset tag-specific area of control block */
   memset(&rw_cb.tcb, 0, sizeof(tRW_TCB));
 
@@ -227,12 +260,14 @@ tNFC_STATUS RW_SetActivatedTagType(tNFC_ACTIVATE_DEVT* p_activate_params,
   if (NFC_PROTOCOL_T1T == p_activate_params->protocol) {
     /* Type1Tag    - NFC-A */
     if (p_activate_params->rf_tech_param.mode == NFC_DISCOVERY_TYPE_POLL_A) {
+      rw_cb.tcb_type = RW_CB_TYPE_T1T;
       status = rw_t1t_select(p_activate_params->rf_tech_param.param.pa.hr,
                              p_activate_params->rf_tech_param.param.pa.nfcid1);
     }
   } else if (NFC_PROTOCOL_T2T == p_activate_params->protocol) {
     /* Type2Tag    - NFC-A */
     if (p_activate_params->rf_tech_param.mode == NFC_DISCOVERY_TYPE_POLL_A) {
+      rw_cb.tcb_type = RW_CB_TYPE_T2T;
       if (p_activate_params->rf_tech_param.param.pa.sel_rsp ==
           NFC_SEL_RES_NFC_FORUM_T2T)
         status = rw_t2t_select();
@@ -240,6 +275,7 @@ tNFC_STATUS RW_SetActivatedTagType(tNFC_ACTIVATE_DEVT* p_activate_params,
   } else if (NFC_PROTOCOL_T3T == p_activate_params->protocol) {
     /* Type3Tag    - NFC-F */
     if (p_activate_params->rf_tech_param.mode == NFC_DISCOVERY_TYPE_POLL_F) {
+      rw_cb.tcb_type = RW_CB_TYPE_T3T;
       status =
           rw_t3t_select(p_activate_params->rf_tech_param.param.pf.nfcid2,
                         p_activate_params->rf_tech_param.param.pf.mrti_check,
@@ -249,16 +285,19 @@ tNFC_STATUS RW_SetActivatedTagType(tNFC_ACTIVATE_DEVT* p_activate_params,
     /* ISODEP/4A,4B- NFC-A or NFC-B */
     if ((p_activate_params->rf_tech_param.mode == NFC_DISCOVERY_TYPE_POLL_B) ||
         (p_activate_params->rf_tech_param.mode == NFC_DISCOVERY_TYPE_POLL_A)) {
+      rw_cb.tcb_type = RW_CB_TYPE_T4T;
       status = rw_t4t_select();
     }
   } else if (NFC_PROTOCOL_T5T == p_activate_params->protocol) {
     /* T5T */
     if (p_activate_params->rf_tech_param.mode == NFC_DISCOVERY_TYPE_POLL_V) {
+      rw_cb.tcb_type = RW_CB_TYPE_T5T;
       status = rw_i93_select(p_activate_params->rf_tech_param.param.pi93.uid);
     }
   } else if (NFC_PROTOCOL_MIFARE == p_activate_params->protocol) {
     /* Mifare Classic*/
     if (p_activate_params->rf_tech_param.mode == NFC_DISCOVERY_TYPE_POLL_A) {
+      rw_cb.tcb_type = RW_CB_TYPE_MIFARE;
       status = rw_mfc_select(
           p_activate_params->rf_tech_param.param.pa.sel_rsp,
           p_activate_params->rf_tech_param.param.pa.nfcid1 +
@@ -267,6 +306,7 @@ tNFC_STATUS RW_SetActivatedTagType(tNFC_ACTIVATE_DEVT* p_activate_params,
   }
   /* TODO set up callback for proprietary protocol */
   else {
+    rw_cb.tcb_type = RW_CB_TYPE_UNKNOWN;
     LOG(ERROR) << StringPrintf("RW_SetActivatedTagType Invalid protocol");
   }
 
-- 
2.34.1

